// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: iris-blur-vs:vert
      frag: iris-blur-fs:frag
      depthStencilState: &dss
        depthTest: false
        depthWrite: false
      blendState: &bs
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState: &rs
        cullMode: none
      properties: &prop
        alphaThreshold: { value: 0.5 }
        area:           { value: 0.01, target: irisParam.x, editor: { slide: true, range: [0.0, 1.0], step: 0.01 } }        
        offset:         { value: 0.0, target: irisParam.y, editor: { slide: true, range: [-1.0, 1.0], step: 0.01 } }

        rotate:         { value: [1.0, 0.0, 0.0, 1.0]}
        radius:         { value: 0.01, target: irisParam.z, editor: { slide: true, range: [0.0, 1.0], step: 0.01 } }
        pixelSize:      { value: 0.01, target: irisParam.w, editor: { slide: true, range: [0.0, 5.0], step: 0.01 } }
    - switch: PREVIEW_MASK
      vert: sprite-vs:vert
      frag: iris-blur-preview-mask-fs:frag
      depthStencilState: *dss
      blendState: *bs
      rasterizerState: *rs
      properties: *prop
}%

CCProgram iris-blur-ubo %{
  uniform BlurConst{
    vec4 rotate;
    vec4 irisParam;   
  };  
}%

CCProgram iris-blur-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  
  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;    

    return pos;
  }
}%

CCProgram iris-blur %{

  struct IrisBlurInput{
    vec2 uv;
    vec4 rotate;

    float radius;
    float pixelSize;
    
    float area;
    float offset;
  };

  float irisBlurMask(vec2 uv, float offset, float area){
    vec2 center = uv * 2.0 - 1.0 + offset; // uv.y [0, 1] -> [-1, 1] 
    return dot(center, center)* area;
  }

  const int iterateCount = 25;
  vec4 irisBlur(sampler2D mainTexture, IrisBlurInput ii){
      mat2 rotMat = mat2(ii.rotate);   
      vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
      vec4 div = vec4(0.0, 0.0, 0.0, 0.0);

      float r = 1.0;
      vec2 angle = vec2(0.0, ii.radius * clamp(irisBlurMask(ii.uv, ii.offset, ii.area), 0.0, 1.0) );
      for(int i = 0; i < iterateCount; i ++ ){
          r += 1.0 / r;
          angle = rotMat * angle;
          vec4 brokeh = texture(mainTexture, ii.uv + ii.pixelSize * (r - 1.0) * angle);
          color += brokeh*brokeh;
          div += brokeh;
      }
      return color/div;      
  } 
}%

CCProgram iris-blur-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color; 

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  #include <iris-blur-ubo>
  #include <iris-blur>

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE

      #if USE_IRIS_BLUR
        IrisBlurInput ii;
        ii.uv = uv0;
        ii.rotate = rotate;
        ii.radius = irisParam.z;
        ii.pixelSize = irisParam.w;

        ii.area = irisParam.x;        
        ii.offset = irisParam.y;

        o *= irisBlur(cc_spriteTexture, ii);
      #else
        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #endif      
      
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%


// debug pass 

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram iris-blur-preview-mask-fs %{ 

  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  #include <iris-blur-ubo>
  #include <iris-blur>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      float mask = irisBlurMask(uv0, irisParam.y, irisParam.x);
      return vec4(mask, 0.0, 0.0, 1.0);
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }

}%