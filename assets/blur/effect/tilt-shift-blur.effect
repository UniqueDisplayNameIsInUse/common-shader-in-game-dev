// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: tile-shift-blur-vs:vert
      frag: tile-shift-blur-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        area:           { value: 0.01, target: tiltParam.x, editor: { slide: true, range: [0.0, 1.0], step: 0.01 } }
        spread:         { value: 0.01, target: tiltParam.y, editor: { slide: true, range: [0.0, 1.0], step: 0.01 } }
        offset:         { value: 0.01, target: tiltParam.z, editor: { slide: true, range: [-1.0, 1.0], step: 0.01 } }

        rotate:         { value: [1.0, 0.0, 0.0, 1.0]}
        radius:         { value: 0.01, target: rotParam.x, editor: { slide: true, range: [0.0, 1.0], step: 0.01 } }
        pixelSize:      { value: 0.01, target: rotParam.y, editor: { slide: true, range: [0.0, 1.0], step: 0.01 } }
}%

CCProgram tilt-shift-blur-ubo %{
  uniform BlurConst{
    vec4 rotate;
    vec4 tiltParam;
    vec2 rotParam;    
  };  
}%

CCProgram tile-shift-blur-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  
  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;    

    return pos;
  }
}%

CCProgram tilt-shift-blur %{

  struct TiltShitInput{
    vec2 uv;
    vec4 rotate;

    float radius;
    float pixelSize;
    
    float area;
    float spread;    
    float offset;
  };

  float tileShiftMask(vec2 uv, float offset, float area, float spread){
    float center = uv.y * 2.0 - 1.0 + offset; // uv.y [0, 1] -> [-1, 1] 
    return pow(abs(center * area), spread);
  }

  const int iterateCount = 25;
  vec4 tileShiftBlur(sampler2D mainTexture, TiltShitInput ti){
      mat2 rotMat = mat2(ti.rotate);   
      vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
      vec4 div = vec4(0.0, 0.0, 0.0, 0.0);

      float r = 1.0;
      vec2 angle = vec2(0.0, ti.radius * clamp(tileShiftMask(ti.uv, ti.offset, ti.area, ti.spread), 0.0, 1.0) );
      for(int i = 0; i < iterateCount; i ++ ){
          r += 1.0 / r;
          angle = rotMat * angle;
          vec4 brokeh = texture(mainTexture, ti.uv + ti.pixelSize * (r - 1.0) * angle);
          color += brokeh*brokeh;
          div += brokeh;
      }
      return color/div;      
  } 
}%

CCProgram tile-shift-blur-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color; 

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  #include <tilt-shift-blur-ubo>
  #include <tilt-shift-blur>

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE

      #if USE_TILT_SHIFT
        TiltShitInput ti;
        ti.uv = uv0;
        ti.rotate = rotate;
        ti.radius = rotParam.x;
        ti.pixelSize = rotParam.y;

        ti.area = tiltParam.x;
        ti.spread = tiltParam.y;
        ti.offset = tiltParam.z;

        o *= tileShiftBlur(cc_spriteTexture, ti);
      #else
        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #endif      
      
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
