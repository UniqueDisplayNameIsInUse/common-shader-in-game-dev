// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - #switch: USE_DOWN_PASS   
      vert: dual-blur-down-vs:vert
      frag: dual-blur-down-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties: &prop
        alphaThreshold: { value: 0.5 }
        texelSizeX: { value: 0.01, target: texelSize.x, editor: { slide: true, range: [0.0, 2048.0], step: 0.01 } }
        texelSizeY: { value: 0.01, target: texelSize.y, editor: { slide: true, range: [0.0, 2048.0], step: 0.01 } }  
        offset:  { value: 0.01, target: texelSize.z, editor: { slide: true, range: [0.0, 5.0], step: 0.01 } }  
    - vert: dual-blur-down-vs:vert
      frag: dual-blur-down-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties: &prop
        alphaThreshold: { value: 0.5 }
        texelSizeX: { value: 0.01, target: texelSize.x, editor: { slide: true, range: [0.0, 2048.0], step: 0.01 } }
        texelSizeY: { value: 0.01, target: texelSize.y, editor: { slide: true, range: [0.0, 2048.0], step: 0.01 } }  
        offset:  { value: 0.01, target: texelSize.z, editor: { slide: true, range: [0.0, 5.0], step: 0.01 } }          
}%

//Dual Kawase Blur，简称Dual Blur，是SIGGRAPH 2015上ARM团队提出的一种衍生自Kawase Blur的模糊算法。其由两种不同的Blur Kernel构成。

CCProgram dual-blur-uv-out-define %{  
  #if USE_TEXTURE
    #if USE_DUAL_BLUR
      out vec4 uv01;
      out vec4 uv23;
      #if UP_PASS
        out vec4 uv45;
        out vec4 uv67;
      #endif //UP_PASS
    #endif //USE_DUAL_BLUR
  #endif //USE_TEXTURE
}%

CCProgram dual-blur-uv-fs-in-define %{
  #if USE_TEXTURE
    #if USE_DUAL_BLUR
      in vec4 uv01;
      in vec4 uv23;  
      #if UP_PASS
        in vec4 uv45;
        in vec4 uv67;
      #endif //UP_PASS
    #endif //USE_DUAL_BLUR
  #endif //USE_TEXTURE
}%

CCProgram dual-blur-ubo %{
  uniform DualConst{
    vec4 texelSize; // XY => texelSize.widht/height Z => offset
  };
}%

CCProgram dual-blur-down-sample %{

  vec4 fragDownSample(sampler2D mainTexture, vec2 uv, vec4 uv01, vec4 uv23){
    vec4 color = texture(mainTexture, uv) * 4.0;
    color += texture(mainTexture, uv01.xy);
    color += texture(mainTexture, uv01.zw);
    color += texture(mainTexture, uv23.xy);
    color += texture(mainTexture, uv23.zw);
    return color * 0.125;
  }

}%

CCProgram dual-blur-up-sample %{

  vec4 fragUpSampler(sampler2D mainTexture, vec2 uv, vec4 uv01, vec4 uv23, vec4 uv45, vec4 uv67){    
    vec4 color = vec4(0.0, 0.0, 0.0, 0.0 );
    color += texture(mainTexture, uv01.xy);
    color += texture(mainTexture, uv01.zw) * 2.0;
    color += texture(mainTexture, uv23.xy);
    color += texture(mainTexture, uv23.zw) * 2.0;
    #if UP_PASS
      color += texture(mainTexture, uv45.xy);
      color += texture(mainTexture, uv45.zw) * 2.0;    
      color += texture(mainTexture, uv67.xy);
      color += texture(mainTexture, uv67.zw) * 2.0;    
    #endif // UP_PASS
    return color * 0.0833;
  }

}%


CCProgram dual-blur-down-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  #include <dual-blur-uv-out-define>

  #include <dual-blur-ubo>

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    #if USE_TEXTURE
      #if USE_DUAL_BLUR
        vec2 texSize = vec2(texelSize.xy) * 0.5;
        float offset = texelSize.z;        
        uv01.xy = uv0 - texSize.xy * vec2(1.0 + offset, 1.0 + offset);//top right
        uv01.zw = uv0 + texSize.xy * vec2(1.0 + offset, 1.0 + offset);//bottom left
        uv23.xy = uv0 - vec2(texSize.x, -texSize.y) * vec2(1.0 + offset, 1.0 + offset);//top left
        uv23.zw = uv0 + vec2(texSize.x, -texSize.y) * vec2(1.0 + offset, 1.0 + offset);//bottom right
      #endif  //USE_DUAL_BLUR
    #endif //USE_TEXTURE

    return pos;
  }
}%


CCProgram dual-blur-down-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include "blur"

  in vec4 color;

  #include <dual-blur-uv-fs-in-define>
  #include <dual-blur-down-sample>

  #if USE_TEXTURE    
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE      
        #if USE_DUAL_BLUR
          o *= fragDownSample(cc_spriteTexture, uv0, uv01, uv23);
        #else
          o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);      
        #endif                
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%


CCProgram dual-blur-up-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  #include <dual-blur-uv-out-define>

  #include <dual-blur-ubo>

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    #if USE_TEXTURE
      #if USE_DUAL_BLUR
          vec2 texSize = texelSize.xy;
       		uv01.xy = uv0 + vec2(-texSize.x * 2, 0) * _Offset;
          uv01.zw = uv0 + vec2(-texSize.x, texSize.y) * _Offset;
          uv23.xy = uv0 + vec2(0, texSize.y * 2) * _Offset;
          uv23.zw = uv0 + texSize * _Offset;
          
          #if UP_PASS
          uv45.xy = uv0 + vec2(texSize.x * 2, 0) * _Offset;
          uv45.zw = uv0 + vec2(texSize.x, -texSize.y) * _Offset;
          uv67.xy = uv0 + vec2(0, -texSize.y * 2) * _Offset;
          uv67.zw = uv0 - texSize * _Offset;
          #endif //UP_PASS

      #endif  //USE_DUAL_BLUR
    #endif //USE_TEXTURE

    return pos;
  }
}%


CCProgram dual-blur-up-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include "blur"

  in vec4 color;

  #include <dual-blur-uv-fs-in-define>
  #include <dual-blur-up-sample>

  #if USE_TEXTURE    
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE      
        #if USE_DUAL_BLUR
          #if UP_PASS
            o *= fragUpSampler(cc_spriteTexture, uv0, uv01, uv23, uv45, uv67);
          #else
            o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);      
          #endif // UP_PASS
        #else
          o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);      
        #endif // USE_DUAL_BLUR                
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%