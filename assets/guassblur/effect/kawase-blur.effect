// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: kawase-blur-vs:vert
      frag: kawase-blur-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        blurOffsetX: { value: 0.01, target: blurOffset.x, editor: { slide: true, range: [0.0, 1.0], step: 0.001 } }
        blurOffsetY: { value: 0.01, target: blurOffset.y, editor: { slide: true, range: [0.0, 1.0], step: 0.001 } }
        pixelOffset: { value: 0.01, target: blurOffset.z, editor: { slide: true, range: [0.0, 1.0], step: 0.001 } }
        
}%

CCProgram kawase-blur-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  uniform BlurConst{
    vec4 blurOffset;
  };  

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram kawase-blur-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;  

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  uniform BlurConst{
    vec4 blurOffset;
  };  

  vec4 kawaseBlur(sampler2D mainTexture, vec2 uv, vec2 texelSize, float pixelOffset ){
    vec4 o = vec4(0, 0, 0, 0);
    o += texture(mainTexture, uv + vec2(pixelOffset +0.5, pixelOffset +0.5) * texelSize); 
    o += texture(mainTexture, uv + vec2(-pixelOffset -0.5, pixelOffset +0.5) * texelSize); 
    o += texture(mainTexture, uv + vec2(-pixelOffset -0.5, -pixelOffset -0.5) * texelSize); 
    o += texture(mainTexture, uv + vec2(pixelOffset +0.5, -pixelOffset -0.5) * texelSize); 
    return o * 0.25;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      #if USE_KAWASE_BLUR        
        o *= kawaseBlur(cc_spriteTexture, uv0, blurOffset.xy, blurOffset.z);                
      #else
        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #endif       
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
