// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: specular-vs:vert # builtin header
      frag: specular-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } } 
        kDiffuse:       { value: 0.5, target: phongParam.x, editor: { slide: true, range: [0, 1], step: 0.01 } }        
        kAmbient:       { value: 0.1, target: phongParam.y, editor: { slide: true, range: [0, 1], step: 0.01 } }
        kGloss:         { value: 5.0, target: phongParam.z, editor: { slide: true, range: [0, 10], step: 0.01 } }
        kSpecular:      { value: 0.3, target: phongParam.w, editor: { slide: true, range: [0, 1], step: 0.01 } }
}%

CCProgram specular-vs %{
  
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/local-batch>
  #include <legacy/input-standard>
  #include <legacy/fog-vs>
  #include <legacy/shadow-map-vs>

  in vec4 a_color;
  #if HAS_SECOND_UV
    in vec2 a_texCoord1;
  #endif

  out vec3 v_position;
  out vec3 v_normal;
  out vec3 v_tangent;
  out vec3 v_bitangent;
  out vec2 v_uv;
  out vec2 v_uv1;
  out vec4 v_color;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld * In.position;

    v_position = pos.xyz;
    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order

    v_uv = a_texCoord;
    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1;
    #endif
    v_color = a_color;

    CC_TRANSFER_FOG(pos);
    CC_TRANSFER_SHADOW(pos);

    return cc_matProj * (cc_matView * matWorld) * In.position;
  }

}%

CCProgram specular-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>
  #include <builtin/uniforms/cc-global>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
    vec4 phongParam;
  };

  vec4 frag () {

    float kDiffuse = phongParam.x;    
    float kAmbient = phongParam.y;
    float kGloss = phongParam.z;
    float kSpecular = phongParam.w;

    vec3 N = normalize(v_normal);
    vec3 L = normalize(cc_mainLitDir.xyz);    
    vec3 V = normalize(cc_cameraPos.xyz - v_position);    

    float NDotL = clamp(dot(N, L), 0.0, 1.0);
    vec3 R = normalize(reflect(L, N));
    float RDotV = clamp(dot(R, V), 0.0, 1.0);

    vec4 col = mainColor * texture(mainTexture, v_uv);    

    vec3 diffuse = vec3(0, 0, 0);

    #if USE_PHONG_DIFFUSE
      diffuse = cc_mainLitColor.rgb * kDiffuse * NDotL;
    #endif

    vec3 specular = vec3(0, 0, 0);
    #if USE_SPECULAR
      specular = cc_mainLitColor.rgb * pow(RDotV, kGloss) * kSpecular;
    #endif

    vec3 ambient = vec3(0.0, 0.0, 0.0);
    #if USE_PHONG_AMBIENT
      ambient = cc_mainLitColor.rgb * kAmbient;
    #endif

    col.rgb *= diffuse + specular + ambient;

    CC_APPLY_FOG(col, v_position);
    return CCFragOutput(col);
  }
}%
