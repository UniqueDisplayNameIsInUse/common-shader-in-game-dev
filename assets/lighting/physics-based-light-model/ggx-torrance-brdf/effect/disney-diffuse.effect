// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }        
        metallic:       { value: 0.1, editor: { slide: true, range: [0, 1], step: 0.001 } }          
        roughness:      { value: 0.1, editor: { slide: true, range: [0, 1], step: 0.001 } }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>
  #include <builtin/uniforms/cc-global>
  #include <ggx-pbr>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;    
    float metallic;
    float roughness;
  };  
  

  // Disney pbr diffuse:
  // fd = (baseColor)/Ï€*( 1+ (FD90 -1)(1 - pow(cosl,5)))*(1 + (FD90 -1) ( 1- pow(cosv, 5)))

  float clamp01(float v){
    return clamp(v, 0.0, 1.0);
  }

  vec4 frag () {
    vec3 N = normalize(v_normal);
    vec3 Li = normalize(cc_mainLitDir.xyz);   
    vec3 Lo = -Li;
    
    vec3 V = normalize(cc_cameraPos.xyz - v_position);
    vec3 H = normalize(Lo + V);    

    vec4 col = mainColor * texture(mainTexture, v_uv);      
    vec3 albedo = col.rgb;
    vec3 F0 = mix(vec3(0.04), albedo, metallic);   

    float NoV = clamp01(dot(N, V));
    float VoH = clamp01(dot(V, H));
    float NoL = clamp01(dot(N, Li));
    float FD90 = 0.5 + 2.0 * roughness * VoH * VoH;

    float FDL = 1.0 + (FD90 - 1.0) * pow5( 1.0 - NoL);
    float FDV = 1.0 + (FD90 - 1.0) * pow5( 1.0 - NoV);

    col.rgb = (albedo/PI) * FDV * FDL * cc_mainLitColor.rgb;
  
    return col;    
  }
}%
