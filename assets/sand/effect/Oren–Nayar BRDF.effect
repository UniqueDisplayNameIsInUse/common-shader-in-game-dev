// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  float PI = 3.1415926;

  float orenNayarDiffuse(float rou, float roughness, float thetaI, float thetaO, float O0, float O1 ){

    float rou2 = rou*rou;
    float A = 1.0 - 0.5 *(rou2 / (rou2 + 0.33));
    float B = 0.45 * (rou2 / ( rou2 + 0.09));

    float alpha = max(thetaI, thetaO);
    float beta = min(thetaI, thetaO);
    float Odiff = O0 - O1;
    
    float result = rou/PI *(A + B* max(0.0, cos(Odiff)*sin(alpha)*tan(beta)));
    return result;
  }


  /**
  https://youtu.be/wt2yYnBRD3U
  
  https://zhuanlan.zhihu.com/p/500809166
  
  */
  vec4 frag () {

    vec3 N = normalize(v_normal);    
    vec3 L = -cc_mainLitDir.xyz;
    vec3 V = cc_cameraPos.xyz - v_position;

    float I = orenNayarDiffuse(0.3, 0.5, 0.3, 0.5, 0.3, 0.6);

    vec4 col = mainColor * texture(mainTexture, v_uv);
    col.rgb *= cc_mainLitColor.rgb * I;
    
    CC_APPLY_FOG(col, v_position);
    return CCFragOutput(col);
  }
}%
