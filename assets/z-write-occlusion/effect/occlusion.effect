// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:        
    - vert: unlit-vs:vert # builtin header
      frag: occlusion-part-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
    - switch: ENABLE_NORMAL_PASS
      vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{
  
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/local-batch>

  out vec2 v_uv;
  out vec3 v_normal;
  out vec3 v_position;

  uniform OutlineVert {
    vec4 outlineParams; // x: line width, y: depth hack
  };

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    float width = outlineParams.x * 0.001;

    #if USE_POSITION_SCALING
      vec3 dir = normalize(In.position.xyz);
      float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;
      In.position.xyz += flip * dir * width * 2.0;
      vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;
    #else
      In.position.xyz += normalize(In.normal) * width;
      vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;
    #endif

    pos.z -= outlineParams.y * 0.002;

    v_uv = a_texCoord;
    vec4 N = cc_matProj * (cc_matView * matWorld ) * vec4(In.normal.xyz, 1.0);
    v_normal = N.xyz;

    return pos;
  }

}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>
  #include <builtin/uniforms/cc-global>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {        
    vec4 col = mainColor * texture(mainTexture, v_uv);
    return CCFragOutput(col);
  }
}%

CCProgram occlusion-part-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>
  #include <builtin/uniforms/cc-global>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {    
    return vec4(1.0, 0.0, 0.0, 1.0);      
    // vec4 col = mainColor * texture(mainTexture, v_uv);
    // return CCFragOutput(col);
  }
}%
